// main global script file

// called when the game starts, before the first room is loaded
function game_start() 
{
  // setup VerbCoin GUI and buttons
  VerbCoin.InterfaceGui = gVerbCoin;
  VerbCoin.RegisterButton(btnLook, eVerbCoinPositionNorth, eModeLookat, "Look at");
  VerbCoin.RegisterButton(btnTalk, eVerbCoinPositionEast, eModeTalkto, "Talk to");
  VerbCoin.RegisterButton(btnInteract, eVerbCoinPositionSouth, eModeInteract, "Use");
  VerbCoin.RegisterButton(btnPickup, eVerbCoinPositionWest, eModePickup, "Pick up");
  
  // select the inventory GUI and action label
  VerbCoin.InventoryGui = gInventory;
  VerbCoin.ActionLabel = lblAction;
  
  // disable buttons where click events would be unhandled
  //VerbCoin.ButtonAutoDisable = true;
}

function cRiverGoddess_Talk(){
  if (!recoveredPaddle){
    cRiverGoddess.Say("The only way to pass is by giving up Stan");
    giveUpStan = true;
    talkedRiverGoddess = true;
  } else {
    cRiverGoddess.Say("I see you have a magically paddle there.");
    cRiverGoddess.Say("If you give it to me I will return Stan to you.");
    goddessGiveUpPaddle = true;
  }
}

function cRiverGoddess_Use(){
  if (goddessGiveUpPaddle){
    player.Say("Fine you can have it. Please just give me Stan back!");
    cRiverGoddess.Walk(465, 305, eBlock, eAnywhere);
    cRiverGoddess.x = 0;
    cRiverGoddess.y = 0;
    player.ChangeRoom(2, 350, player.y, eDirectionRight);
    cStan.FollowCharacter(player, 10, 10);
    recoveredPaddle = false;
  } else {
    player.Say("Why would I use the River Goddess?");
  }
}

function cStan_Talk(){
  if (goddessGiveUpPaddle){
    cStan.Say("I can't believe you would sacrafice me for a paddle!");
    cStan.Say("I am never talking to you again!");
    player.Say("No Stan please! Please don't leave me!");
    cStan.Walk(300,  465, eBlock, eAnywhere);
    cStan.FollowCharacter(cPaddle, 10, 10);
    player.Say("I lost my bestfriend and my magic paddle :(");
    Display("Was  it  really  worth  it  to  lose  your  bestfriend  for  that  adventure?");
    QuitGame(0);
  } else {
    player.Say("Hey Stan!");
  }
}

function cStan_Use(){
  if (giveUpStan){
    player.Say("I am sorry Stan, but you must die");
    giveUpStan = false;
    player.ChangeRoom(3, player.x, player.y, eDirectionRight);
    cRiverGoddess.ChangeRoom(3, cRiverGoddess.x, cRiverGoddess.y);
    cStan.x = 0;
    cStan.y = 0;
    cStan.FollowCharacter(cPaddle, 10, 10);
  } else {
    player.Say("Why would I use Stan?");
  }
}

function cPaddle_Use(){
  if (recoveredPaddle){
    player.Say("Well I have my paddle back but I don't have anyone to play with.");
    player.Say("How am I supposed to play Ping Pong alone :(");
    Display("Congratulations  on  getting  the  paddle  back,  but  at  what  cost?");
    QuitGame(0);
    
  } else {
    player.Say("Stan its so nice to play ping pong with you");
    cStan.Say("I can't wait to start!");
  
    cReginald.Walk(cPaddle.x, cPaddle.y, eBlock, eAnywhere);
    cPaddle.x = 0;
    cPaddle.y = 0;
    cReginald.Say("Playing ping pong with the magic paddle");
    cReginald.Say("How foolish of you. Ill be taking that");
    cReginald.Walk(650, 0, eBlock, eAnywhere);
    player.Say("Oh no! Reginald Bird III stole my paddle!");
    cStan.Say("Well we need to go get it back! Follow that bird!");
    paddleStolen = true;
    cReginald.ChangeRoom(5, 500, 400, eDirectionDownLeft);
  }
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute() 
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

// called when a key is pressed
function on_key_press(eKeyCode keycode) 
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (VerbCoin.IsOpen())
    {
      // Escape will close the VerbCoin GUI
      VerbCoin.Close();
    }
    else if (gInventory.Visible)
    {
      // Escape will close the inventory GUI
      gInventory.Visible = false;
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      gExitGame.Visible = false;
      VerbCoin.Enable();
      mouse.UseDefaultGraphic();
    }
    else
    {
      // Escape will prompt to exit the game
      gExitGame.Visible = true;
      VerbCoin.Disable();
      mouse.UseModeGraphic(eModeWalkto);
    }
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    QuitGame(1);
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0); 
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
  else if (keycode == eKeyTab)
  {
    if (VerbCoin.IsOpen())
    {
      VerbCoin.Close();
    }
    
    gInventory.Visible = true;
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by VerbCoin script
}

// called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type) 
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnCloseInventory_OnClick(GUIControl *control, MouseButton button)
{
  gInventory.Visible = false;
}

function btnPlay_OnClick(GUIControl *control, MouseButton button)
{
  gExitGame.Visible = false;
  VerbCoin.Enable();
  mouse.UseDefaultGraphic();
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function VerbCoinButton_OnClick(GUIControl* control, MouseButton button)
{
  // pass click processing back to script module
  VerbCoin.OnClick(control, button);
}

function gVerbCoin_OnClick(GUI *theGui, MouseButton button)
{
  VerbCoin.Close();
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{
  if (button == eMouseRight)
  {
    VerbCoin.Close();
  }
}

function cRoger_UseInv()
{
  player.ActiveInventory.RunInteraction(eModeInteract);
}

function iCup_Interact()
{
  player.Say("I don't think drinking this would be wise.");
}

function cReginald_Talk()
{
  player.Say("Reginald! I have come to get the paddle back!");
  cReginald.Say("What! How did you get here!");
  player.Say("I had to kill my bestfriend to get here. Now give me the paddle!");
  cReginald.Say("You are hardcore! I am not messing with you. Although I offer you a deal.");
  cReginald.Say("If you let me keep the paddle, I will give you your friend back");
  cReginald.Say("If you leave my castle without taking the paddle from me you can have your friend");
  talkedReginald = true;
}

function cReginald_Interact()
{
  if(talkedReginald){
    player.Say("No way! I want my paddle back!");
    cReginald.Say("As you wish. Here is your paddle");
    recoveredPaddle = true;
    player.ChangeRoom(4, 300, 300, eDirectionDownLeft);
  }else{
    cReginald.Say("Don't you want to hear my offer?");
  }
}
